#!/bin/bash
set -e
set -u

ulimit -d 8000000 -m 8000000 -v 8000000
umask 002


OPTIONS="$@"
qoption () {
    for a in $OPTIONS; do if [ "$a" = "$1" ]; then return 0; fi; done
    return 1
}

option () {
    for a in $OPTIONS; do if [ "$a" = "$1" ]; then date -uR; return 0; fi; done
    return 1
}

# DATE
NOW=`date +"%Y%m%d%H%M%S" -u`
YEAR=`date +"%Y" -u`

# Dirs:
BASE=/var/archive-kit/britney2
DAK_LOCKDIR=/srv/dak/lock
FTP_MIRROR=/srv/dak/ftp

VAR=$BASE/var
HEIDI=$VAR/Heidi
INPUT=$VAR/input

DATA=$VAR/data
LOCKDIR=$VAR/lock
HEIDI_SET=$HEIDI/set
UPDATE_OUT=$DATA/update_out
URGENCIES=$INPUT/urgencies

LOCK=$LOCKDIR/britney.lock
DAK_LOCK=$DAK_LOCKDIR/daily.lock
DAK_STOP=$DAK_LOCKDIR/archive.stop

HTML=/srv/qa.tanglu.org/staging-report

# Britney 2
CODE_B2=$BASE
B2_OUTPUT=$VAR/output
B2_CONFIG=$CODE_B2/britney.conf
B2_CONFIG_NOBREAKALL=$CODE_B2/britney_nobreakall.conf

if [ -f $DAK_STOP ]; then
  echo "$DAK_STOP exists, not running"
  exit 1
fi

# 10800 seconds = 3 hours
# 129600 seconds = 36 hours
if ! lockfile -r0 -l129600 $LOCK 2>/dev/null >/dev/null; then
    echo "Could not get britney lockfile!"
    ls -l "$LOCK"
    exit 1
fi

trap exit_function 0
exit_function () {
    rm -f $LOCK
}

eval $( dak admin config db-shell )

suite_arches () {
    echo "amd64 i386"
    #echo "SELECT space_separated_list(arch)
    #        FROM suite_arch_by_name
    #        WHERE suite = '$1'" | psql -t -P "border=0"
}

if ! qoption allowdaklock; then
	while [ -f $DAK_LOCK ]; do
		echo `date` $DAK_LOCK exists.  Sleeping in 10 more minutes.
		sleep 600
	done
fi

urgencies () {
  echo URGENCIES:
  cd $BASE
  for u in $URGENCIES/install-urgencies-*; do
    [ -e "$u" ] || continue
    cat "$u" >> $1/testing/Urgency # XXX I'd rather not have this in $DATA --dato
    rm "$u"
  done
}

if option urgencies; then
  urgencies $DATA
fi

pkg_lists () {
  for suite in staging bartholomea; do
      suite_dir=$FTP_MIRROR/dists/$suite
      gzip -t $suite_dir/{main,contrib,non-free}/source/Sources.gz
      zcat $suite_dir/{main,contrib,non-free}/source/Sources.gz >$1/$suite/Sources
      for arch in `suite_arches $suite`; do
          gzip -t $suite_dir/{main,contrib,non-free}/binary-$arch/Packages.gz
          zcat $suite_dir/{main,contrib,non-free}/binary-$arch/Packages.gz >$1/$suite/Packages_$arch
          for di_pkg_file in $suite_dir/{main,contrib,non-free}/debian-installer/binary-$arch/Packages.gz; do
              if [ -f $di_pkg_file ]; then
                  gzip -t $di_pkg_file
                  zcat $di_pkg_file >>$1/$suite/Packages_$arch
              fi
          done
      done
  done
}

lite_sync () {
  cat <<EOF | rsync -a --files-from=- $1 $2
testing/Dates
testing/BugsV
testing/Urgency
unstable/BugsV
unstable/Hints
EOF

}

if option pkglists; then
  echo PKGLISTS:
  cd $DATA
  pkg_lists $DATA
fi

b2_diff () {
    tmp_dir=`mktemp -d`
    master="b2"
    [ "$master" = "b1" ] && secondary="b2" || secondary="b1"
    (cd $tmp_dir

    sort $B2_OUTPUT/HeidiResult >HeidiResult_b2

    sed -e '/^<p>Generated: /d' $B2_OUTPUT/excuses.html >excuses_b2.html

    touch -m -r $B2_OUTPUT/HeidiResult HeidiResult_b2

    touch -m -r $B2_OUTPUT/excuses.html excuses_b2.html

    # NB: If you remove the "head" below, add a "|| true"; otherwise
    # set -e may not allow the HeidiResult diff to execute.
    diff -u excuses_${master}.html excuses_${secondary}.html | head -n 1000
    diff -u HeidiResult_${master} HeidiResult_${secondary} | head -n 1000)
    rm -rf $tmp_dir
}

b2_diff_with_mail () {
  b2_diff
  b2_diff | ifne mail -s "britney2 diff `date -u +'%Y-%m-%d %H:%M'`" \
    -a "Reply-To: mak@debian.org" mak@debian.org
}

run_b2 () {
  $CODE_B2/britney.py -c $B2_CONFIG --control-files -v
}

if option run; then
  echo RUN:
  run_b2
fi

if option run_b2; then
  echo RUN_B2:
  run_b2
  b2_diff_with_mail
fi

if option b2_diff; then
    b2_diff
fi

dak_import () {
  /srv/dak/scripts/tanglu/import_dataset.sh
}

save () {
  cd $BASE
  echo RESULTS:
  # write out a new heidi set
  HEIDI_RESULT="$B2_OUTPUT/HeidiResult"

  echo Using data from $HEIDI_RESULT
  HEIDI_FILENAME=$HEIDI_SET/`date -u +"%Y-%m-%d_%H.%M"`
  HEIDI_CURRENT=$HEIDI_SET/current
  (grep -Evi ' faux$' $HEIDI_RESULT | cut -d\  -f1-3 | sort -u) >$HEIDI_FILENAME
  if cmp --quiet $HEIDI_FILENAME $HEIDI_CURRENT; then
      echo HeidiResult identical to current, not saving
  else
    gzip --best `readlink -f $HEIDI_CURRENT`
    ln -sf `basename $HEIDI_FILENAME` $HEIDI_CURRENT
  fi
  dak_import
  # update the release mirror on ries
  # printf "Updating DD-accessible mirror..."
  # ssh -T release-sync-push || true
  # printf " done\n"
}

if option save || option save_b2; then
  save b2
fi

if option dak_import; then
  dak_import
fi

create_uninst_report () {
    $CODE_B2/britney.py -c $1 --print-uninst >$HTML/$2.new
    echo -e "\n# Generated: `date -uR`" >>$HTML/$2.new
    mv $HTML/$2.new $HTML/$2
}

stats () {
  echo STATS:

  cp $B2_OUTPUT/excuses.html $HTML/update_excuses.html
  cp $B2_OUTPUT/output.txt $HTML/update_output.txt

  gzip -9 < $HTML/update_excuses.html > $HTML/update_excuses.html.gz
  gzip -9 < $HTML/update_output.txt > $HTML/update_output.txt.gz
  mkdir -p $HTML/update_output/$YEAR
  mkdir -p $HTML/update_excuses/$YEAR
  cp $HTML/update_output.txt.gz $HTML/update_output/$YEAR/$NOW.txt.gz
  cp $HTML/update_excuses.html.gz $HTML/update_excuses/$YEAR/$NOW.html.gz

  # TODO: {stable,unstable}_uninst.txt -- needs support in b2, talk to Fabio
  # TODO: this creates uninstallability reports against b2 results, not b1's
  create_uninst_report $B2_CONFIG testing_uninst.txt
  #create_uninst_report $B2_CONFIG_NOBREAKALL testing_uninst_full.txt

  if grep -q -e '-meta-faux' $HTML/testing_uninst.txt; then
    echo >&2 'Warning! Some -meta-faux package is uninstallable!'
  fi

  #create_ood_report $DATA/stable stable_outdate.txt
  #create_ood_report $DATA/testing testing_outdate.txt
}

if option stats_b1; then
  stats b1
fi
if option stats || option stats_b2; then
  stats b2
fi

if option summary; then
  cd $BASE
  echo "Out of dates holding up testing:"
  TERM=vt100 lynx -nolist -dump $HTML/update_excuses.html | sed -n 's/^ *[^ ] *[^ ]*out of date on \([^ ]*\): .*$/\1/p' | sort | uniq -c | sort -n
  echo "Uninstallables holding up testing:"
  sed < $HTML/update_excuses.html -n 's/^ *<li>[^ ]* (\([^, ]*\),.*) uninstallable.*$/\1/p' | sort | uniq -c | sort -n
  #echo "wanna-build stats:"
  #for a in alpha arm hppa hurd-i386 i386 ia64 m68k mips mipsel powerpc s390 sparc; do
  #  printf "  %-12s " "$a:"
  #  /srv/wanna-build/bin/wanna-build-statistics --database=$a/build-db |
  #    grep "if also counting" || echo "-"
  #done
fi

if option archivedata; then
  echo ARCHIVE:
  cd $VAR
  tar czf data_bkup/data-$(date +"%Y.%m.%d").tgz data/{staging,bartholomea}
fi

echo -n "Finished at: "; date -uR
