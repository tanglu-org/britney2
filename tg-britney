#!/bin/bash
set -e
set -u

ulimit -d 8000000 -m 8000000 -v 8000000
umask 002


OPTIONS="$@"
qoption () {
    for a in $OPTIONS; do if [ "$a" = "$1" ]; then return 0; fi; done
    return 1
}

option () {
    for a in $OPTIONS; do if [ "$a" = "$1" ]; then date -uR; return 0; fi; done
    return 1
}

# Suite
SUITE=dasyatis

# DATE
NOW=`date +"%Y%m%d%H%M%S" -u`
YEAR=`date +"%Y" -u`

# Dirs:
BASE=/var/archive-kit/britney2
DAK_LOCKDIR=/srv/dak/lock
FTP_MIRROR=/srv/dak/ftp/tanglu

VAR=$BASE/var
HEIDI=$VAR/Heidi
INPUT=$VAR/input

DATA=$VAR/data
LOCKDIR=$VAR/lock
HEIDI_SET=$HEIDI/set
UPDATE_OUT=$DATA/update_out
URGENCIES=$INPUT/urgencies

LOCK=$LOCKDIR/britney.lock
DAK_LOCK=$DAK_LOCKDIR/daily.lock
DAK_STOP=$DAK_LOCKDIR/archive.stop

HTML=/srv/qa.tanglu.org/staging-report

# Britney 2
CODE_B2=$BASE
B2_OUTPUT=$VAR/output/$SUITE
B2_CONFIG=$CODE_B2/britney.conf

if [ -f $DAK_STOP ]; then
  echo "$DAK_STOP exists, not running"
  exit 1
fi

# 10800 seconds = 3 hours
# 129600 seconds = 36 hours
if ! lockfile -r0 -l129600 $LOCK 2>/dev/null >/dev/null; then
    echo "Could not get britney lockfile!"
    ls -l "$LOCK"
    exit 1
fi

trap exit_function 0
exit_function () {
    rm -f $LOCK
}

if ! qoption allowdaklock; then
	while [ -f $DAK_LOCK ]; do
		echo `date` $DAK_LOCK exists.  Sleeping in 10 more minutes.
		sleep 600
	done
fi

urgencies () {
  echo URGENCIES:
  cd $BASE
  for u in $URGENCIES/install-urgencies-*; do
    [ -e "$u" ] || continue
    cat "$u" >> $1/state/age-policy-urgencies
    rm "$u"
  done
}

if option urgencies; then
  urgencies $DATA
fi

if option run; then
  echo RUN:
  $CODE_B2/britney.py -c $B2_CONFIG -v
fi

dak_import () {
  /srv/dak/scripts/tanglu/import_dataset.sh
}

save () {
  cd $BASE
  echo RESULTS:
  # write out a new heidi set
  HEIDI_RESULT="$B2_OUTPUT/HeidiResult"

  echo Using data from $HEIDI_RESULT
  HEIDI_FILENAME=$HEIDI_SET/`date -u +"%Y-%m-%d_%H.%M"`
  HEIDI_CURRENT=$HEIDI_SET/current
  (grep -Evi ' faux$' $HEIDI_RESULT | cut -d\  -f1-3 | sort -u) >$HEIDI_FILENAME
  if cmp --quiet $HEIDI_FILENAME $HEIDI_CURRENT; then
      echo HeidiResult identical to current, not saving
  else
    gzip --best `readlink -f $HEIDI_CURRENT`
    ln -sf `basename $HEIDI_FILENAME` $HEIDI_CURRENT
  fi
  dak_import
}

if option save || option save_b2; then
  save b2
fi

if option dak_import; then
  dak_import
fi

create_uninst_report () {
    $CODE_B2/britney.py -c $1 --print-uninst >$HTML/$2.new
    echo -e "\n# Generated: `date -uR`" >>$HTML/$2.new
    mv $HTML/$2.new $HTML/$2
}

stats () {
  echo STATS:

  cp $B2_OUTPUT/excuses.html $HTML/update_excuses.html
  cp $B2_OUTPUT/output.txt $HTML/update_output.txt

  gzip -9 < $HTML/update_excuses.html > $HTML/update_excuses.html.gz
  gzip -9 < $HTML/update_output.txt > $HTML/update_output.txt.gz
  mkdir -p $HTML/update_output/$YEAR
  mkdir -p $HTML/update_excuses/$YEAR
  cp $HTML/update_output.txt.gz $HTML/update_output/$YEAR/$NOW.txt.gz
  cp $HTML/update_excuses.html.gz $HTML/update_excuses/$YEAR/$NOW.html.gz

  # TODO: {stable,unstable}_uninst.txt -- needs support in b2, talk to Fabio
  # TODO: this creates uninstallability reports against b2 results, not b1's
  create_uninst_report $B2_CONFIG testing_uninst.txt
  #create_uninst_report $B2_CONFIG_NOBREAKALL testing_uninst_full.txt

  if grep -q -e '-meta-faux' $HTML/testing_uninst.txt; then
    echo >&2 'Warning! Some -meta-faux package is uninstallable!'
  fi

  # create pretty output for qa.tanglu.org
  rapidumo --refresh-page migrations
}

if option stats || option stats_b2; then
  stats b2
fi

if option summary; then
  cd $BASE
  echo "Out of dates holding up testing:"
  TERM=vt100 lynx -nolist -dump $HTML/update_excuses.html | sed -n 's/^ *[^ ] *[^ ]*out of date on \([^ ]*\): .*$/\1/p' | sort | uniq -c | sort -n
  echo "Uninstallables holding up testing:"
  sed < $HTML/update_excuses.html -n 's/^ *<li>[^ ]* (\([^, ]*\),.*) uninstallable.*$/\1/p' | sort | uniq -c | sort -n
fi

echo -n "Finished at: "; date -uR
